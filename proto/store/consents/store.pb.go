// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: proto/store/consents/store.proto

// Package consents provides Remembered Consents PB for storage

package consents

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RequestMatchType defines what request is valid to use this consent.
type RememberedConsentPreference_RequestMatchType int32

const (
	// NONE : do not remember.
	RememberedConsentPreference_NONE RememberedConsentPreference_RequestMatchType = 0
	// SUBSET : request resource and scopes are subset of resource and scopes in
	// this item.
	RememberedConsentPreference_SUBSET RememberedConsentPreference_RequestMatchType = 1
	// ANYTHING : request anything.
	RememberedConsentPreference_ANYTHING RememberedConsentPreference_RequestMatchType = 2
)

// Enum value maps for RememberedConsentPreference_RequestMatchType.
var (
	RememberedConsentPreference_RequestMatchType_name = map[int32]string{
		0: "NONE",
		1: "SUBSET",
		2: "ANYTHING",
	}
	RememberedConsentPreference_RequestMatchType_value = map[string]int32{
		"NONE":     0,
		"SUBSET":   1,
		"ANYTHING": 2,
	}
)

func (x RememberedConsentPreference_RequestMatchType) Enum() *RememberedConsentPreference_RequestMatchType {
	p := new(RememberedConsentPreference_RequestMatchType)
	*p = x
	return p
}

func (x RememberedConsentPreference_RequestMatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RememberedConsentPreference_RequestMatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_store_consents_store_proto_enumTypes[0].Descriptor()
}

func (RememberedConsentPreference_RequestMatchType) Type() protoreflect.EnumType {
	return &file_proto_store_consents_store_proto_enumTypes[0]
}

func (x RememberedConsentPreference_RequestMatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RememberedConsentPreference_RequestMatchType.Descriptor instead.
func (RememberedConsentPreference_RequestMatchType) EnumDescriptor() ([]byte, []int) {
	return file_proto_store_consents_store_proto_rawDescGZIP(), []int{0, 0}
}

// ReleaseType defines what to release.
type RememberedConsentPreference_ReleaseType int32

const (
	RememberedConsentPreference_UNSPECIFIED RememberedConsentPreference_ReleaseType = 0
	// SELECTED : release selected visas of this item.
	RememberedConsentPreference_SELECTED RememberedConsentPreference_ReleaseType = 1
	// ANYTHING_NEEDED: release anything request needed.
	RememberedConsentPreference_ANYTHING_NEEDED RememberedConsentPreference_ReleaseType = 2
)

// Enum value maps for RememberedConsentPreference_ReleaseType.
var (
	RememberedConsentPreference_ReleaseType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SELECTED",
		2: "ANYTHING_NEEDED",
	}
	RememberedConsentPreference_ReleaseType_value = map[string]int32{
		"UNSPECIFIED":     0,
		"SELECTED":        1,
		"ANYTHING_NEEDED": 2,
	}
)

func (x RememberedConsentPreference_ReleaseType) Enum() *RememberedConsentPreference_ReleaseType {
	p := new(RememberedConsentPreference_ReleaseType)
	*p = x
	return p
}

func (x RememberedConsentPreference_ReleaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RememberedConsentPreference_ReleaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_store_consents_store_proto_enumTypes[1].Descriptor()
}

func (RememberedConsentPreference_ReleaseType) Type() protoreflect.EnumType {
	return &file_proto_store_consents_store_proto_enumTypes[1]
}

func (x RememberedConsentPreference_ReleaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RememberedConsentPreference_ReleaseType.Descriptor instead.
func (RememberedConsentPreference_ReleaseType) EnumDescriptor() ([]byte, []int) {
	return file_proto_store_consents_store_proto_rawDescGZIP(), []int{0, 1}
}

// RememberedConsentPreference contains the consent a user has given for release
// of visas to a specific OAuth client.
type RememberedConsentPreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientName          string                                       `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	CreateTime          *timestamppb.Timestamp                       `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime          *timestamppb.Timestamp                       `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	RequestMatchType    RememberedConsentPreference_RequestMatchType `protobuf:"varint,4,opt,name=request_match_type,json=requestMatchType,proto3,enum=consents.RememberedConsentPreference_RequestMatchType" json:"request_match_type,omitempty"`
	RequestedResources  []string                                     `protobuf:"bytes,5,rep,name=requested_resources,json=requestedResources,proto3" json:"requested_resources,omitempty"`
	RequestedScopes     []string                                     `protobuf:"bytes,6,rep,name=requested_scopes,json=requestedScopes,proto3" json:"requested_scopes,omitempty"`
	ReleaseType         RememberedConsentPreference_ReleaseType      `protobuf:"varint,7,opt,name=release_type,json=releaseType,proto3,enum=consents.RememberedConsentPreference_ReleaseType" json:"release_type,omitempty"`
	SelectedVisas       []*RememberedConsentPreference_Visa          `protobuf:"bytes,8,rep,name=selected_visas,json=selectedVisas,proto3" json:"selected_visas,omitempty"`
	ReleaseProfileName  bool                                         `protobuf:"varint,9,opt,name=release_profile_name,json=releaseProfileName,proto3" json:"release_profile_name,omitempty"`
	ReleaseProfileEmail bool                                         `protobuf:"varint,10,opt,name=release_profile_email,json=releaseProfileEmail,proto3" json:"release_profile_email,omitempty"`
	ReleaseProfileOther bool                                         `protobuf:"varint,11,opt,name=release_profile_other,json=releaseProfileOther,proto3" json:"release_profile_other,omitempty"`
	ReleaseAccountAdmin bool                                         `protobuf:"varint,12,opt,name=release_account_admin,json=releaseAccountAdmin,proto3" json:"release_account_admin,omitempty"`
	ReleaseLink         bool                                         `protobuf:"varint,13,opt,name=release_link,json=releaseLink,proto3" json:"release_link,omitempty"`
	ReleaseIdentities   bool                                         `protobuf:"varint,14,opt,name=release_identities,json=releaseIdentities,proto3" json:"release_identities,omitempty"`
}

func (x *RememberedConsentPreference) Reset() {
	*x = RememberedConsentPreference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_store_consents_store_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RememberedConsentPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RememberedConsentPreference) ProtoMessage() {}

func (x *RememberedConsentPreference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_store_consents_store_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RememberedConsentPreference.ProtoReflect.Descriptor instead.
func (*RememberedConsentPreference) Descriptor() ([]byte, []int) {
	return file_proto_store_consents_store_proto_rawDescGZIP(), []int{0}
}

func (x *RememberedConsentPreference) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *RememberedConsentPreference) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RememberedConsentPreference) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *RememberedConsentPreference) GetRequestMatchType() RememberedConsentPreference_RequestMatchType {
	if x != nil {
		return x.RequestMatchType
	}
	return RememberedConsentPreference_NONE
}

func (x *RememberedConsentPreference) GetRequestedResources() []string {
	if x != nil {
		return x.RequestedResources
	}
	return nil
}

func (x *RememberedConsentPreference) GetRequestedScopes() []string {
	if x != nil {
		return x.RequestedScopes
	}
	return nil
}

func (x *RememberedConsentPreference) GetReleaseType() RememberedConsentPreference_ReleaseType {
	if x != nil {
		return x.ReleaseType
	}
	return RememberedConsentPreference_UNSPECIFIED
}

func (x *RememberedConsentPreference) GetSelectedVisas() []*RememberedConsentPreference_Visa {
	if x != nil {
		return x.SelectedVisas
	}
	return nil
}

func (x *RememberedConsentPreference) GetReleaseProfileName() bool {
	if x != nil {
		return x.ReleaseProfileName
	}
	return false
}

func (x *RememberedConsentPreference) GetReleaseProfileEmail() bool {
	if x != nil {
		return x.ReleaseProfileEmail
	}
	return false
}

func (x *RememberedConsentPreference) GetReleaseProfileOther() bool {
	if x != nil {
		return x.ReleaseProfileOther
	}
	return false
}

func (x *RememberedConsentPreference) GetReleaseAccountAdmin() bool {
	if x != nil {
		return x.ReleaseAccountAdmin
	}
	return false
}

func (x *RememberedConsentPreference) GetReleaseLink() bool {
	if x != nil {
		return x.ReleaseLink
	}
	return false
}

func (x *RememberedConsentPreference) GetReleaseIdentities() bool {
	if x != nil {
		return x.ReleaseIdentities
	}
	return false
}

// Visa contains fields to match released visas user have.
type RememberedConsentPreference_Visa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	By     string `protobuf:"bytes,3,opt,name=by,proto3" json:"by,omitempty"`
	Iss    string `protobuf:"bytes,4,opt,name=iss,proto3" json:"iss,omitempty"`
}

func (x *RememberedConsentPreference_Visa) Reset() {
	*x = RememberedConsentPreference_Visa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_store_consents_store_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RememberedConsentPreference_Visa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RememberedConsentPreference_Visa) ProtoMessage() {}

func (x *RememberedConsentPreference_Visa) ProtoReflect() protoreflect.Message {
	mi := &file_proto_store_consents_store_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RememberedConsentPreference_Visa.ProtoReflect.Descriptor instead.
func (*RememberedConsentPreference_Visa) Descriptor() ([]byte, []int) {
	return file_proto_store_consents_store_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RememberedConsentPreference_Visa) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RememberedConsentPreference_Visa) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RememberedConsentPreference_Visa) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

func (x *RememberedConsentPreference_Visa) GetIss() string {
	if x != nil {
		return x.Iss
	}
	return ""
}

var File_proto_store_consents_store_proto protoreflect.FileDescriptor

var file_proto_store_consents_store_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x08,
	0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x51, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x73,
	0x61, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x56, 0x69, 0x73, 0x61, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x69,
	0x73, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x04, 0x56, 0x69, 0x73, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x10, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x53, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x59, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x22, 0x41, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x4e, 0x59, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x42, 0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72,
	0x65, 0x2d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_store_consents_store_proto_rawDescOnce sync.Once
	file_proto_store_consents_store_proto_rawDescData = file_proto_store_consents_store_proto_rawDesc
)

func file_proto_store_consents_store_proto_rawDescGZIP() []byte {
	file_proto_store_consents_store_proto_rawDescOnce.Do(func() {
		file_proto_store_consents_store_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_store_consents_store_proto_rawDescData)
	})
	return file_proto_store_consents_store_proto_rawDescData
}

var file_proto_store_consents_store_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_store_consents_store_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_store_consents_store_proto_goTypes = []interface{}{
	(RememberedConsentPreference_RequestMatchType)(0), // 0: consents.RememberedConsentPreference.RequestMatchType
	(RememberedConsentPreference_ReleaseType)(0),      // 1: consents.RememberedConsentPreference.ReleaseType
	(*RememberedConsentPreference)(nil),               // 2: consents.RememberedConsentPreference
	(*RememberedConsentPreference_Visa)(nil),          // 3: consents.RememberedConsentPreference.Visa
	(*timestamppb.Timestamp)(nil),                     // 4: google.protobuf.Timestamp
}
var file_proto_store_consents_store_proto_depIdxs = []int32{
	4, // 0: consents.RememberedConsentPreference.create_time:type_name -> google.protobuf.Timestamp
	4, // 1: consents.RememberedConsentPreference.expire_time:type_name -> google.protobuf.Timestamp
	0, // 2: consents.RememberedConsentPreference.request_match_type:type_name -> consents.RememberedConsentPreference.RequestMatchType
	1, // 3: consents.RememberedConsentPreference.release_type:type_name -> consents.RememberedConsentPreference.ReleaseType
	3, // 4: consents.RememberedConsentPreference.selected_visas:type_name -> consents.RememberedConsentPreference.Visa
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_store_consents_store_proto_init() }
func file_proto_store_consents_store_proto_init() {
	if File_proto_store_consents_store_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_store_consents_store_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RememberedConsentPreference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_store_consents_store_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RememberedConsentPreference_Visa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_store_consents_store_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_store_consents_store_proto_goTypes,
		DependencyIndexes: file_proto_store_consents_store_proto_depIdxs,
		EnumInfos:         file_proto_store_consents_store_proto_enumTypes,
		MessageInfos:      file_proto_store_consents_store_proto_msgTypes,
	}.Build()
	File_proto_store_consents_store_proto = out.File
	file_proto_store_consents_store_proto_rawDesc = nil
	file_proto_store_consents_store_proto_goTypes = nil
	file_proto_store_consents_store_proto_depIdxs = nil
}
